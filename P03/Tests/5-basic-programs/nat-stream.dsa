(DAIMI-SchemeE03
  (8 3 1)
  ((1 lambda-deep%0)
   (2 lambda-deep%1)
   (1 lambda-deep%2)
   (1 lambda-flat%3)
   (1 lambda-flat%4)
   (3 lambda-deep%5)
   (2 lambda-deep%6)
   (1 lambda-deep%7)
   (0 lambda-flat%8)
   (0 lambda-flat%9)
   (0 lambda-flat%10))
  ((load close-deep 0 glo 0)
   (load close-deep 1 glo 1)
   (move lib 27 glo 2)
   (load close-deep 2 glo 3)
   (new-vec 0)
   (load close-flat 3 tmp 0)
   (new-vec 2)
   (load int 0 vec 0)
   (move tmp 0 vec 1)
   (call glo 1 0)
   (move res 0 glo 4)
   (new-vec 0)
   (load close-flat 4 tmp 0)
   (new-vec 2)
   (load int 1 vec 0)
   (move tmp 0 vec 1)
   (call glo 1 0)
   (move res 0 glo 5)
   (load close-deep 5 glo 6)
   (load close-deep 6 glo 7)
   (new-vec 3)
   (move glo 4 vec 0)
   (move glo 5 vec 1)
   (move lib 6 vec 2)
   (call glo 6 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move tmp 0 vec 0)
   (load int 10 vec 1)
   (tail-call glo 7)

   (label lambda-deep%0)
   (new-vec 0)
   (tail-call 0 0)

   (label lambda-deep%1)
   (new-vec 1)
   (extend)
   (load close-deep 7 0 0)
   (new-vec 1)
   (move 1 0 vec 0)
   (tail-call 0 0)

   (label lambda-deep%2)
   (new-vec 1)
   (move 0 0 vec 0)
   (call lib 28 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move tmp 0 vec 0)
   (tail-call glo 0)

   (label lambda-flat%3)
   (new-vec 2)
   (load int 2 vec 0)
   (move 0 0 vec 1)
   (tail-call lib 1)

   (label lambda-flat%4)
   (new-vec 2)
   (load int 2 vec 0)
   (move 0 0 vec 1)
   (tail-call lib 1)

   (label lambda-deep%5)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 2 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move 0 1 vec 0)
   (call glo 2 1)
   (move res 0 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (call 0 2 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%13)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 2 0)
   (move res 0 tmp 0)
   (new-vec 3)
   (move 0 2 vec 0)
   (move 0 1 vec 1)
   (move 0 0 vec 2)
   (load close-flat 8 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (tail-call lib 26)
   (label else%13)
   (new-vec 1)
   (move 0 1 vec 0)
   (call glo 2 0)
   (move res 0 tmp 0)
   (new-vec 3)
   (move 0 2 vec 0)
   (move 0 0 vec 1)
   (move 0 1 vec 2)
   (load close-flat 9 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (tail-call lib 26)

   (label lambda-deep%6)
   (new-vec 2)
   (move 0 1 vec 0)
   (load int 0 vec 1)
   (call lib 8 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%14)
   (load nil _ res 0)
   (return)
   (label else%14)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 2 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 3 1)
   (move res 0 tmp 1)
   (new-vec 2)
   (move 0 1 vec 0)
   (load int 1 vec 1)
   (call lib 2 2)
   (move res 0 tmp 2)
   (new-vec 2)
   (move tmp 1 vec 0)
   (move tmp 2 vec 1)
   (call glo 7 1)
   (move res 0 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (tail-call lib 26)

   (label lambda-deep%7)
   (new-vec 3)
   (move 1 0 vec 0)
   (move 0 0 vec 1)
   (move 2 1 vec 2)
   (load close-flat 10 tmp 0)
   (new-vec 2)
   (move 0 0 vec 0)
   (move tmp 0 vec 1)
   (tail-call lib 26)

   (label lambda-flat%8)
   (new-vec 1)
   (move 1 2 vec 0)
   (call glo 3 0)
   (move res 0 tmp 0)
   (new-vec 3)
   (move tmp 0 vec 0)
   (move 1 1 vec 1)
   (move 1 0 vec 2)
   (tail-call glo 6)

   (label lambda-flat%9)
   (new-vec 1)
   (move 1 2 vec 0)
   (call glo 3 0)
   (move res 0 tmp 0)
   (new-vec 3)
   (move 1 1 vec 0)
   (move tmp 0 vec 1)
   (move 1 0 vec 2)
   (tail-call glo 6)

   (label lambda-flat%10)
   (new-vec 1)
   (move 1 1 vec 0)
   (call 1 2 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move tmp 0 vec 0)
   (tail-call 1 0))
  "DAIMI-Scheme compiler, 03-10-22")
