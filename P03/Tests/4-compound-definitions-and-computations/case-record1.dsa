(DAIMI-SchemeE03
  (5 2 1)
  ((1 lambda-deep%0)
   (1 lambda-deep%1)
   (2 lambda-deep%2)
   (1 lambda-deep%3)
   (1 lambda-deep%4))
  ((load close-deep 0 glo 0)
   (load close-deep 1 glo 1)
   (load close-deep 2 glo 2)
   (load close-deep 3 glo 3)
   (load close-deep 4 glo 4)
   (new-vec 1)
   (load int 10 vec 0)
   (call glo 0 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move tmp 0 vec 0)
   (call glo 4 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (load int 20 vec 0)
   (load int 30 vec 1)
   (call glo 2 1)
   (move res 0 tmp 1)
   (new-vec 1)
   (move tmp 1 vec 0)
   (call glo 4 1)
   (move res 0 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (tail-call lib 1)

   (label lambda-deep%0)
   (new-vec 2)
   (load sym Cell vec 0)
   (move 0 0 vec 1)
   (tail-call lib 32)

   (label lambda-deep%1)
   (new-vec 1)
   (move 0 0 vec 0)
   (call lib 34 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%6)
   (new-vec 1)
   (move 0 0 vec 0)
   (call lib 35 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move tmp 0 vec 0)
   (load int 2 vec 1)
   (call lib 8 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%7)
   (new-vec 2)
   (move 0 0 vec 0)
   (load int 0 vec 1)
   (call lib 36 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move tmp 0 vec 0)
   (load sym Cell vec 1)
   (tail-call lib 40)
   (label else%7)
   (load bool 0 res 0)
   (return)
   (label else%6)
   (load bool 0 res 0)
   (return)

   (label lambda-deep%2)
   (new-vec 3)
   (load sym Pair vec 0)
   (move 0 0 vec 1)
   (move 0 1 vec 2)
   (tail-call lib 32)

   (label lambda-deep%3)
   (new-vec 1)
   (move 0 0 vec 0)
   (call lib 34 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%8)
   (new-vec 1)
   (move 0 0 vec 0)
   (call lib 35 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move tmp 0 vec 0)
   (load int 3 vec 1)
   (call lib 8 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%9)
   (new-vec 2)
   (move 0 0 vec 0)
   (load int 0 vec 1)
   (call lib 36 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move tmp 0 vec 0)
   (load sym Pair vec 1)
   (tail-call lib 40)
   (label else%9)
   (load bool 0 res 0)
   (return)
   (label else%8)
   (load bool 0 res 0)
   (return)

   (label lambda-deep%4)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 1 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%10)
   (new-vec 2)
   (move 0 0 vec 0)
   (load int 1 vec 1)
   (call lib 36 0)
   (move res 0 tmp 0)
   (new-vec 1)
   (move tmp 0 vec 0)
   (extend)
   (move 0 0 res 0)
   (return)
   (label else%10)
   (new-vec 1)
   (move 0 0 vec 0)
   (call glo 3 0)
   (move res 0 tmp 0)
   (jump-if-false tmp 0 else%11)
   (new-vec 2)
   (move 0 0 vec 0)
   (load int 1 vec 1)
   (call lib 36 0)
   (move res 0 tmp 0)
   (new-vec 2)
   (move 0 0 vec 0)
   (load int 2 vec 1)
   (call lib 36 1)
   (move res 0 tmp 1)
   (new-vec 2)
   (move tmp 0 vec 0)
   (move tmp 1 vec 1)
   (extend)
   (new-vec 2)
   (move 0 0 vec 0)
   (move 0 1 vec 1)
   (tail-call lib 1)
   (label else%11)
   (load sym woops res 0)
   (return))
  "DAIMI-Scheme compiler, 03-10-22")
